/**
 * generated by Xtext 2.26.0
 */
package org.xtext.pascal.program.demoFkd.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.pascal.program.demoFkd.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.pascal.program.demoFkd.DemoFkdPackage
 * @generated
 */
public class DemoFkdSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DemoFkdPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DemoFkdSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DemoFkdPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DemoFkdPackage.PASCAL:
      {
        pascal pascal = (pascal)theEObject;
        T result = casepascal(pascal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.PROGRAM:
      {
        program program = (program)theEObject;
        T result = caseprogram(program);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.PROGRAM_HEADING_BLOCK:
      {
        program_heading_block program_heading_block = (program_heading_block)theEObject;
        T result = caseprogram_heading_block(program_heading_block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.IDENTIFIER_LIST:
      {
        identifier_list identifier_list = (identifier_list)theEObject;
        T result = caseidentifier_list(identifier_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.BLOCK:
      {
        block block = (block)theEObject;
        T result = caseblock(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.USES_COMMAND_DEFINITION_PART:
      {
        uses_command_definition_part uses_command_definition_part = (uses_command_definition_part)theEObject;
        T result = caseuses_command_definition_part(uses_command_definition_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.STATEMENT_PART:
      {
        statement_part statement_part = (statement_part)theEObject;
        T result = casestatement_part(statement_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.STATEMENT_SEQUENCE:
      {
        statement_sequence statement_sequence = (statement_sequence)theEObject;
        T result = casestatement_sequence(statement_sequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.STATEMENT:
      {
        statement statement = (statement)theEObject;
        T result = casestatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.LABEL:
      {
        label label = (label)theEObject;
        T result = caselabel(label);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.SIMPLE_STATEMENT:
      {
        simple_statement simple_statement = (simple_statement)theEObject;
        T result = casesimple_statement(simple_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.ASSIGNMENT_STATEMENT:
      {
        assignment_statement assignment_statement = (assignment_statement)theEObject;
        T result = caseassignment_statement(assignment_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VARIABLE:
      {
        variable variable = (variable)theEObject;
        T result = casevariable(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VAR_:
      {
        var_ var_ = (var_)theEObject;
        T result = casevar_(var_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.EXPRESSION_LIST:
      {
        expression_list expression_list = (expression_list)theEObject;
        T result = caseexpression_list(expression_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.EXPRESSION:
      {
        expression expression = (expression)theEObject;
        T result = caseexpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.SIMPLE_EXPRESSION:
      {
        simple_expression simple_expression = (simple_expression)theEObject;
        T result = casesimple_expression(simple_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.TERM:
      {
        term term = (term)theEObject;
        T result = caseterm(term);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.FACTOR:
      {
        factor factor = (factor)theEObject;
        T result = casefactor(factor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.NUMBER:
      {
        number number = (number)theEObject;
        T result = casenumber(number);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.ANY_NUMBER:
      {
        any_number any_number = (any_number)theEObject;
        T result = caseany_number(any_number);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.SET:
      {
        set set = (set)theEObject;
        T result = caseset(set);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.FUNCTION_DESIGNATOR:
      {
        function_designator function_designator = (function_designator)theEObject;
        T result = casefunction_designator(function_designator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.STRUCTURED_STATEMENT:
      {
        structured_statement structured_statement = (structured_statement)theEObject;
        T result = casestructured_statement(structured_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.COMPOUND_STATEMENT:
      {
        compound_statement compound_statement = (compound_statement)theEObject;
        T result = casecompound_statement(compound_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.REPETITIVE_STATEMENT:
      {
        repetitive_statement repetitive_statement = (repetitive_statement)theEObject;
        T result = caserepetitive_statement(repetitive_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.WHILE_STATEMENT:
      {
        while_statement while_statement = (while_statement)theEObject;
        T result = casewhile_statement(while_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.REPEAT_STATEMENT:
      {
        repeat_statement repeat_statement = (repeat_statement)theEObject;
        T result = caserepeat_statement(repeat_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.FOR_STATEMENT:
      {
        for_statement for_statement = (for_statement)theEObject;
        T result = casefor_statement(for_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CONDITIONAL_STATEMENT:
      {
        conditional_statement conditional_statement = (conditional_statement)theEObject;
        T result = caseconditional_statement(conditional_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.IF_STATEMENT:
      {
        if_statement if_statement = (if_statement)theEObject;
        T result = caseif_statement(if_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CASE_STATEMENT:
      {
        case_statement case_statement = (case_statement)theEObject;
        T result = casecase_statement(case_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CASE_LIMB:
      {
        case_limb case_limb = (case_limb)theEObject;
        T result = casecase_limb(case_limb);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CASE_LABEL_LIST:
      {
        case_label_list case_label_list = (case_label_list)theEObject;
        T result = casecase_label_list(case_label_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CONSTANT:
      {
        constant constant = (constant)theEObject;
        T result = caseconstant(constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.WITH_STATEMENT:
      {
        with_statement with_statement = (with_statement)theEObject;
        T result = casewith_statement(with_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.GOTO_STATEMENT:
      {
        goto_statement goto_statement = (goto_statement)theEObject;
        T result = casegoto_statement(goto_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.LABEL_DECLARATION_PART:
      {
        label_declaration_part label_declaration_part = (label_declaration_part)theEObject;
        T result = caselabel_declaration_part(label_declaration_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CONSTANT_DEFINITION_PART:
      {
        constant_definition_part constant_definition_part = (constant_definition_part)theEObject;
        T result = caseconstant_definition_part(constant_definition_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CONSTANT_DEFINITION:
      {
        constant_definition constant_definition = (constant_definition)theEObject;
        T result = caseconstant_definition(constant_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.TYPE_DEFINITION_PART:
      {
        type_definition_part type_definition_part = (type_definition_part)theEObject;
        T result = casetype_definition_part(type_definition_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.TYPE_DEFINITION:
      {
        type_definition type_definition = (type_definition)theEObject;
        T result = casetype_definition(type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.TYPE:
      {
        type type = (type)theEObject;
        T result = casetype(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.SIMPLE_TYPE:
      {
        simple_type simple_type = (simple_type)theEObject;
        T result = casesimple_type(simple_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.SUBRANGE_TYPE:
      {
        subrange_type subrange_type = (subrange_type)theEObject;
        T result = casesubrange_type(subrange_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.ENUMERATED_TYPE:
      {
        enumerated_type enumerated_type = (enumerated_type)theEObject;
        T result = caseenumerated_type(enumerated_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.STRUCTURED_TYPE:
      {
        structured_type structured_type = (structured_type)theEObject;
        T result = casestructured_type(structured_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.UNPACKED_STRUCTURED_TYPE:
      {
        unpacked_structured_type unpacked_structured_type = (unpacked_structured_type)theEObject;
        T result = caseunpacked_structured_type(unpacked_structured_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.ARRAY_TYPE:
      {
        array_type array_type = (array_type)theEObject;
        T result = casearray_type(array_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.DYNAMIC_ARRAY_TYPE:
      {
        dynamic_array_type dynamic_array_type = (dynamic_array_type)theEObject;
        T result = casedynamic_array_type(dynamic_array_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.INDEX_TYPE:
      {
        index_type index_type = (index_type)theEObject;
        T result = caseindex_type(index_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.RECORD_TYPE:
      {
        record_type record_type = (record_type)theEObject;
        T result = caserecord_type(record_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CLASS_TYPE:
      {
        class_type class_type = (class_type)theEObject;
        T result = caseclass_type(class_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.MEMBER_LIST:
      {
        member_list member_list = (member_list)theEObject;
        T result = casemember_list(member_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.PROPERTIES_PART:
      {
        properties_part properties_part = (properties_part)theEObject;
        T result = caseproperties_part(properties_part);
        if (result == null) result = casemember_list(properties_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.PROPERTY_SECTION:
      {
        property_section property_section = (property_section)theEObject;
        T result = caseproperty_section(property_section);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.PROPERTY_LIST:
      {
        property_list property_list = (property_list)theEObject;
        T result = caseproperty_list(property_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.METHOD_PART:
      {
        method_part method_part = (method_part)theEObject;
        T result = casemethod_part(method_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.FIELD_LIST:
      {
        field_list field_list = (field_list)theEObject;
        T result = casefield_list(field_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.FIXED_PART:
      {
        fixed_part fixed_part = (fixed_part)theEObject;
        T result = casefixed_part(fixed_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VARIABLE_IDENTIFIER_LIST:
      {
        variable_identifier_list variable_identifier_list = (variable_identifier_list)theEObject;
        T result = casevariable_identifier_list(variable_identifier_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VARIABLE_SECTION:
      {
        variable_section variable_section = (variable_section)theEObject;
        T result = casevariable_section(variable_section);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.RECORD_SECTION:
      {
        record_section record_section = (record_section)theEObject;
        T result = caserecord_section(record_section);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VARIANT_PART:
      {
        variant_part variant_part = (variant_part)theEObject;
        T result = casevariant_part(variant_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.TAG_FIELD:
      {
        tag_field tag_field = (tag_field)theEObject;
        T result = casetag_field(tag_field);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VARIANT:
      {
        variant variant = (variant)theEObject;
        T result = casevariant(variant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.SET_TYPE:
      {
        set_type set_type = (set_type)theEObject;
        T result = caseset_type(set_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.FILE_TYPE:
      {
        file_type file_type = (file_type)theEObject;
        T result = casefile_type(file_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.POINTER_TYPE:
      {
        pointer_type pointer_type = (pointer_type)theEObject;
        T result = casepointer_type(pointer_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VARIABLE_DECLARATION_PART:
      {
        variable_declaration_part variable_declaration_part = (variable_declaration_part)theEObject;
        T result = casevariable_declaration_part(variable_declaration_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.PROCEDURE_AND_FUNCTION_DECLARATION_PART:
      {
        procedure_and_function_declaration_part procedure_and_function_declaration_part = (procedure_and_function_declaration_part)theEObject;
        T result = caseprocedure_and_function_declaration_part(procedure_and_function_declaration_part);
        if (result == null) result = casemethod_part(procedure_and_function_declaration_part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.ABSTRACTION_DECLARATION:
      {
        abstraction_declaration abstraction_declaration = (abstraction_declaration)theEObject;
        T result = caseabstraction_declaration(abstraction_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.ABSTRACTION_HEADING:
      {
        abstraction_heading abstraction_heading = (abstraction_heading)theEObject;
        T result = caseabstraction_heading(abstraction_heading);
        if (result == null) result = caseabstraction_declaration(abstraction_heading);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.FORMAL_PARAMETER_LIST:
      {
        formal_parameter_list formal_parameter_list = (formal_parameter_list)theEObject;
        T result = caseformal_parameter_list(formal_parameter_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.FORMAL_PARAMETER_SECTION:
      {
        formal_parameter_section formal_parameter_section = (formal_parameter_section)theEObject;
        T result = caseformal_parameter_section(formal_parameter_section);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VALUE_PARAMETER_SECTION:
      {
        value_parameter_section value_parameter_section = (value_parameter_section)theEObject;
        T result = casevalue_parameter_section(value_parameter_section);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.PARAMETER_TYPE:
      {
        parameter_type parameter_type = (parameter_type)theEObject;
        T result = caseparameter_type(parameter_type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.CONFORMANT_ARRAY_SCHEMA:
      {
        conformant_array_schema conformant_array_schema = (conformant_array_schema)theEObject;
        T result = caseconformant_array_schema(conformant_array_schema);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.PACKED_CONFORMANT_ARRAY_SCHEMA:
      {
        packed_conformant_array_schema packed_conformant_array_schema = (packed_conformant_array_schema)theEObject;
        T result = casepacked_conformant_array_schema(packed_conformant_array_schema);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.BOUND_SPECIFICATION:
      {
        bound_specification bound_specification = (bound_specification)theEObject;
        T result = casebound_specification(bound_specification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.UNPACKED_CONFORMANT_ARRAY_SCHEMA:
      {
        unpacked_conformant_array_schema unpacked_conformant_array_schema = (unpacked_conformant_array_schema)theEObject;
        T result = caseunpacked_conformant_array_schema(unpacked_conformant_array_schema);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DemoFkdPackage.VARIABLE_PARAMETER_SECTION:
      {
        variable_parameter_section variable_parameter_section = (variable_parameter_section)theEObject;
        T result = casevariable_parameter_section(variable_parameter_section);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>pascal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>pascal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepascal(pascal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprogram(program object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>program heading block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>program heading block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprogram_heading_block(program_heading_block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>identifier list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>identifier list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseidentifier_list(identifier_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseblock(block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>uses command definition part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>uses command definition part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseuses_command_definition_part(uses_command_definition_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statement part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statement part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatement_part(statement_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statement sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statement sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatement_sequence(statement_sequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatement(statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselabel(label object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>simple statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>simple statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesimple_statement(simple_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>assignment statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>assignment statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseassignment_statement(assignment_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariable(variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>var </em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>var </em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevar_(var_ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression_list(expression_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression(expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>simple expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>simple expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesimple_expression(simple_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseterm(term object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefactor(factor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenumber(number object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>any number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>any number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseany_number(any_number object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseset(set object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>function designator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>function designator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunction_designator(function_designator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>structured statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>structured statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestructured_statement(structured_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>compound statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>compound statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecompound_statement(compound_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>repetitive statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>repetitive statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserepetitive_statement(repetitive_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>while statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>while statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewhile_statement(while_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>repeat statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>repeat statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserepeat_statement(repeat_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>for statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>for statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefor_statement(for_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>conditional statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>conditional statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconditional_statement(conditional_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>if statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>if statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseif_statement(if_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>case statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>case statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecase_statement(case_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>case limb</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>case limb</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecase_limb(case_limb object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>case label list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>case label list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecase_label_list(case_label_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstant(constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>with statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>with statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewith_statement(with_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>goto statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>goto statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegoto_statement(goto_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>label declaration part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>label declaration part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselabel_declaration_part(label_declaration_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant definition part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant definition part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstant_definition_part(constant_definition_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstant_definition(constant_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type definition part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type definition part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_definition_part(type_definition_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_definition(type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype(type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>simple type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>simple type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesimple_type(simple_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>subrange type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>subrange type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casesubrange_type(subrange_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumerated type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumerated type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumerated_type(enumerated_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>structured type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>structured type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestructured_type(structured_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unpacked structured type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unpacked structured type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunpacked_structured_type(unpacked_structured_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>array type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>array type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casearray_type(array_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>dynamic array type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>dynamic array type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedynamic_array_type(dynamic_array_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>index type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>index type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseindex_type(index_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>record type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>record type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserecord_type(record_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>class type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>class type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseclass_type(class_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>member list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>member list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemember_list(member_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>properties part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>properties part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseproperties_part(properties_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>property section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>property section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseproperty_section(property_section object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>property list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>property list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseproperty_list(property_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>method part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>method part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemethod_part(method_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>field list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>field list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefield_list(field_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fixed part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fixed part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefixed_part(fixed_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable identifier list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable identifier list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariable_identifier_list(variable_identifier_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariable_section(variable_section object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>record section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>record section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserecord_section(record_section object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variant part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variant part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariant_part(variant_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tag field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tag field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetag_field(tag_field object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariant(variant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>set type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>set type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseset_type(set_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>file type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>file type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefile_type(file_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>pointer type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>pointer type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepointer_type(pointer_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable declaration part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable declaration part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariable_declaration_part(variable_declaration_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>procedure and function declaration part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>procedure and function declaration part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprocedure_and_function_declaration_part(procedure_and_function_declaration_part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>abstraction declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>abstraction declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseabstraction_declaration(abstraction_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>abstraction heading</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>abstraction heading</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseabstraction_heading(abstraction_heading object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formal parameter list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formal parameter list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformal_parameter_list(formal_parameter_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formal parameter section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formal parameter section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformal_parameter_section(formal_parameter_section object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>value parameter section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>value parameter section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevalue_parameter_section(value_parameter_section object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_type(parameter_type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>conformant array schema</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>conformant array schema</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconformant_array_schema(conformant_array_schema object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>packed conformant array schema</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>packed conformant array schema</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepacked_conformant_array_schema(packed_conformant_array_schema object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>bound specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>bound specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebound_specification(bound_specification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unpacked conformant array schema</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unpacked conformant array schema</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunpacked_conformant_array_schema(unpacked_conformant_array_schema object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable parameter section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable parameter section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariable_parameter_section(variable_parameter_section object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DemoFkdSwitch

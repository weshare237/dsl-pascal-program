/**
 * generated by Xtext 2.26.0
 */
package org.xtext.pascal.program.demoFkd.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.pascal.program.demoFkd.DemoFkdPackage;
import org.xtext.pascal.program.demoFkd.block;
import org.xtext.pascal.program.demoFkd.constant_definition_part;
import org.xtext.pascal.program.demoFkd.label_declaration_part;
import org.xtext.pascal.program.demoFkd.procedure_and_function_declaration_part;
import org.xtext.pascal.program.demoFkd.statement_part;
import org.xtext.pascal.program.demoFkd.type_definition_part;
import org.xtext.pascal.program.demoFkd.uses_command_definition_part;
import org.xtext.pascal.program.demoFkd.variable_declaration_part;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.pascal.program.demoFkd.impl.blockImpl#getUses_command <em>Uses command</em>}</li>
 *   <li>{@link org.xtext.pascal.program.demoFkd.impl.blockImpl#getLabel <em>Label</em>}</li>
 *   <li>{@link org.xtext.pascal.program.demoFkd.impl.blockImpl#getConstant <em>Constant</em>}</li>
 *   <li>{@link org.xtext.pascal.program.demoFkd.impl.blockImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.pascal.program.demoFkd.impl.blockImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.pascal.program.demoFkd.impl.blockImpl#getAbstraction <em>Abstraction</em>}</li>
 *   <li>{@link org.xtext.pascal.program.demoFkd.impl.blockImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class blockImpl extends MinimalEObjectImpl.Container implements block
{
  /**
   * The cached value of the '{@link #getUses_command() <em>Uses command</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUses_command()
   * @generated
   * @ordered
   */
  protected uses_command_definition_part uses_command;

  /**
   * The cached value of the '{@link #getLabel() <em>Label</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected label_declaration_part label;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected constant_definition_part constant;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected type_definition_part type;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected variable_declaration_part variable;

  /**
   * The cached value of the '{@link #getAbstraction() <em>Abstraction</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstraction()
   * @generated
   * @ordered
   */
  protected procedure_and_function_declaration_part abstraction;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected statement_part statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected blockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DemoFkdPackage.Literals.BLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public uses_command_definition_part getUses_command()
  {
    return uses_command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUses_command(uses_command_definition_part newUses_command, NotificationChain msgs)
  {
    uses_command_definition_part oldUses_command = uses_command;
    uses_command = newUses_command;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__USES_COMMAND, oldUses_command, newUses_command);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUses_command(uses_command_definition_part newUses_command)
  {
    if (newUses_command != uses_command)
    {
      NotificationChain msgs = null;
      if (uses_command != null)
        msgs = ((InternalEObject)uses_command).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__USES_COMMAND, null, msgs);
      if (newUses_command != null)
        msgs = ((InternalEObject)newUses_command).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__USES_COMMAND, null, msgs);
      msgs = basicSetUses_command(newUses_command, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__USES_COMMAND, newUses_command, newUses_command));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public label_declaration_part getLabel()
  {
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabel(label_declaration_part newLabel, NotificationChain msgs)
  {
    label_declaration_part oldLabel = label;
    label = newLabel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__LABEL, oldLabel, newLabel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabel(label_declaration_part newLabel)
  {
    if (newLabel != label)
    {
      NotificationChain msgs = null;
      if (label != null)
        msgs = ((InternalEObject)label).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__LABEL, null, msgs);
      if (newLabel != null)
        msgs = ((InternalEObject)newLabel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__LABEL, null, msgs);
      msgs = basicSetLabel(newLabel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__LABEL, newLabel, newLabel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public constant_definition_part getConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstant(constant_definition_part newConstant, NotificationChain msgs)
  {
    constant_definition_part oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__CONSTANT, oldConstant, newConstant);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(constant_definition_part newConstant)
  {
    if (newConstant != constant)
    {
      NotificationChain msgs = null;
      if (constant != null)
        msgs = ((InternalEObject)constant).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__CONSTANT, null, msgs);
      if (newConstant != null)
        msgs = ((InternalEObject)newConstant).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__CONSTANT, null, msgs);
      msgs = basicSetConstant(newConstant, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__CONSTANT, newConstant, newConstant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public type_definition_part getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(type_definition_part newType, NotificationChain msgs)
  {
    type_definition_part oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(type_definition_part newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public variable_declaration_part getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable(variable_declaration_part newVariable, NotificationChain msgs)
  {
    variable_declaration_part oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__VARIABLE, oldVariable, newVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(variable_declaration_part newVariable)
  {
    if (newVariable != variable)
    {
      NotificationChain msgs = null;
      if (variable != null)
        msgs = ((InternalEObject)variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__VARIABLE, null, msgs);
      if (newVariable != null)
        msgs = ((InternalEObject)newVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__VARIABLE, null, msgs);
      msgs = basicSetVariable(newVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__VARIABLE, newVariable, newVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public procedure_and_function_declaration_part getAbstraction()
  {
    return abstraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAbstraction(procedure_and_function_declaration_part newAbstraction, NotificationChain msgs)
  {
    procedure_and_function_declaration_part oldAbstraction = abstraction;
    abstraction = newAbstraction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__ABSTRACTION, oldAbstraction, newAbstraction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstraction(procedure_and_function_declaration_part newAbstraction)
  {
    if (newAbstraction != abstraction)
    {
      NotificationChain msgs = null;
      if (abstraction != null)
        msgs = ((InternalEObject)abstraction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__ABSTRACTION, null, msgs);
      if (newAbstraction != null)
        msgs = ((InternalEObject)newAbstraction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__ABSTRACTION, null, msgs);
      msgs = basicSetAbstraction(newAbstraction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__ABSTRACTION, newAbstraction, newAbstraction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public statement_part getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(statement_part newStatement, NotificationChain msgs)
  {
    statement_part oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatement(statement_part newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DemoFkdPackage.BLOCK__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DemoFkdPackage.BLOCK__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DemoFkdPackage.BLOCK__USES_COMMAND:
        return basicSetUses_command(null, msgs);
      case DemoFkdPackage.BLOCK__LABEL:
        return basicSetLabel(null, msgs);
      case DemoFkdPackage.BLOCK__CONSTANT:
        return basicSetConstant(null, msgs);
      case DemoFkdPackage.BLOCK__TYPE:
        return basicSetType(null, msgs);
      case DemoFkdPackage.BLOCK__VARIABLE:
        return basicSetVariable(null, msgs);
      case DemoFkdPackage.BLOCK__ABSTRACTION:
        return basicSetAbstraction(null, msgs);
      case DemoFkdPackage.BLOCK__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DemoFkdPackage.BLOCK__USES_COMMAND:
        return getUses_command();
      case DemoFkdPackage.BLOCK__LABEL:
        return getLabel();
      case DemoFkdPackage.BLOCK__CONSTANT:
        return getConstant();
      case DemoFkdPackage.BLOCK__TYPE:
        return getType();
      case DemoFkdPackage.BLOCK__VARIABLE:
        return getVariable();
      case DemoFkdPackage.BLOCK__ABSTRACTION:
        return getAbstraction();
      case DemoFkdPackage.BLOCK__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DemoFkdPackage.BLOCK__USES_COMMAND:
        setUses_command((uses_command_definition_part)newValue);
        return;
      case DemoFkdPackage.BLOCK__LABEL:
        setLabel((label_declaration_part)newValue);
        return;
      case DemoFkdPackage.BLOCK__CONSTANT:
        setConstant((constant_definition_part)newValue);
        return;
      case DemoFkdPackage.BLOCK__TYPE:
        setType((type_definition_part)newValue);
        return;
      case DemoFkdPackage.BLOCK__VARIABLE:
        setVariable((variable_declaration_part)newValue);
        return;
      case DemoFkdPackage.BLOCK__ABSTRACTION:
        setAbstraction((procedure_and_function_declaration_part)newValue);
        return;
      case DemoFkdPackage.BLOCK__STATEMENT:
        setStatement((statement_part)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DemoFkdPackage.BLOCK__USES_COMMAND:
        setUses_command((uses_command_definition_part)null);
        return;
      case DemoFkdPackage.BLOCK__LABEL:
        setLabel((label_declaration_part)null);
        return;
      case DemoFkdPackage.BLOCK__CONSTANT:
        setConstant((constant_definition_part)null);
        return;
      case DemoFkdPackage.BLOCK__TYPE:
        setType((type_definition_part)null);
        return;
      case DemoFkdPackage.BLOCK__VARIABLE:
        setVariable((variable_declaration_part)null);
        return;
      case DemoFkdPackage.BLOCK__ABSTRACTION:
        setAbstraction((procedure_and_function_declaration_part)null);
        return;
      case DemoFkdPackage.BLOCK__STATEMENT:
        setStatement((statement_part)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DemoFkdPackage.BLOCK__USES_COMMAND:
        return uses_command != null;
      case DemoFkdPackage.BLOCK__LABEL:
        return label != null;
      case DemoFkdPackage.BLOCK__CONSTANT:
        return constant != null;
      case DemoFkdPackage.BLOCK__TYPE:
        return type != null;
      case DemoFkdPackage.BLOCK__VARIABLE:
        return variable != null;
      case DemoFkdPackage.BLOCK__ABSTRACTION:
        return abstraction != null;
      case DemoFkdPackage.BLOCK__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

} //blockImpl
